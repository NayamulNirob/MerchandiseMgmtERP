Relevancy to Merchandise Management
Cutting Planning and Management

Ensures efficient use of materials and helps track fabric inventory, which fits the broader scope of merchandise management.
Sewing and Assembly Line Management

Monitoring production efficiency aligns with the need to manage stock levels and ensure timely availability of products for sale.
Material Requirements Planning (MRP)

Critical for managing the supply chain effectively, including inventory of materials needed to create the merchandise.
Quality Control Checks

Quality assurance is essential for maintaining product standards, thus impacting the overall merchandising strategy.
Production Tracking and Reporting

Essential for real-time insights into product availability, informing merchandising and sales strategies.
Inventory Management for Raw Materials

Managing raw material inventory directly affects the ability to create and supply finished goods, key to an effective merchandise management system.
BOM (Bill of Materials) Management

Helps in understanding the composition of products for better financial planning and inventory management.
Costing and Estimation Tools

Important for pricing strategies and understanding margins, aligned with merchandising objectives.
Sample Management

Essential for previewing new products and getting approvals, which influences stock planning and merchandising strategies.
Returns and Defect Tracking

Impacts product availability and customer satisfaction, important elements of effective merchandise management.
Customization and Personalization Management

New trends in merchandising often include personalization, and managing these requests is crucial for staying competitive.
Supplier Collaboration Features

Collaborating with suppliers is vital in ensuring the timely availability of stock, directly affecting merchandising strategies.
Sustainability Tracking

Increasingly important in merchandising, as many brands seek to highlight sustainable practices as part of their product offerings.
Why This Matters in Merchandise Management
In merchandise management, comprehensive oversight of the entire product lifecycle—from design, production, inventory management, and quality control, to sales and customer feedback—is essential. By integrating features that cater to production as well as merchandising elements, the app can facilitate:

Enhanced Decision-Making: Providing accurate data on what products are available and when they will be ready to market.
Improved Inventory Management: Ensuring that the right products are available at the right time, thus minimizing stockouts and overstock.
Cost Efficiency: Enabling fine-tuning of production processes to reduce costs and improve margins.
Customer Satisfaction: By managing quality and returns effectively, customers are more likely to receive high-quality products, which can improve loyalty


public class AdjusatmentMaterial {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String remarks;

    private double quantity;

    private double price;

    @ManyToOne
    @JoinColumn
    private Stock stock;

    @ManyToOne
    @JoinColumn
    private Warehouse warehouse;

    @ManyToOne
    @JoinColumn
    private RawMateriaes rawMateriaes;

    @ManyToOne
    @JoinColumn
    private OrderItem orderItem;
}



public class InventoryItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private long stock;


    @ManyToOne
    @JoinColumn
    private Warehouse warehouse;

    @ManyToOne(fetch = FetchType.EAGER)
    private Product product;

}


public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(nullable = false)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private String description;

    @Column(nullable = false)
    private double price;



    @ManyToMany(mappedBy = "products")
    private List<Supplier> suppliers;

    @OneToMany(fetch = FetchType.EAGER)
    private List<InventoryItem> inventoryItemList;

}


public class Purchase {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String puchaseStatus;

    private LocalDateTime purchaseDate;

    private LocalDateTime dalivaryDate;

    private double price;

    private int quantity;

    private double tax;

    private double paid;

    private double total;

    @ManyToOne
    @JoinColumn
    private Supplier supplier;

    @ManyToOne
    @JoinColumn
    private Warehouse warehouse;

    @ManyToOne
    @JoinColumn
    private RawMateriaes rawMateriaes;
}

public class Stock {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private double quantity;

    private LocalDateTime createdAt;

    private LocalDateTime updatedAt;

    private String catagoryName;

    @ManyToOne
    @JoinColumn
    private RawMateriaes rawMateriaes;

    @ManyToOne
    @JoinColumn
    private Product product;

    @ManyToOne
    @JoinColumn
    private Warehouse warehouse;

}


public class Supplier {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    @Column(nullable = false)
    private String name;
    private String contactPerson;
    private String email;
    private String phone;
    private String address;
    private Date createdAt;
    private Date updatedAt;
    private String status;


    @ManyToMany
    private List<Product> products;



}



public class Warehouse {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)

    private Long id;

    private String name;

    private String location;

    private long capacity;

    private String contact;


}


public class Customer {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String phone;


    private String address;


    private LocalDateTime createdAt;


    private LocalDateTime updatedAt;


    private String contactPerson;


    private String country;

   
    private String organigation;


}


public class Fabric {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    private String image;
    private String attachment;
}



public class LabourCost {

    @Id
    @GeneratedValue(strategy =  GenerationType.IDENTITY)
    private Long id;
    
    private String departmentName;

    private double unitCost;

    private double hour;
    

    @ManyToOne
    @JoinColumn
    private StyleCategories styleCategory;
}



public class Measurement {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String codeName;
    private String measurementName;
    private String measurementDescription;
    private String measurementTolerance;
    private String small;
    private String medium;
    private String large;
    private String tolerance;
    private String attachmentName;
    private String attachmentDescription;

    @ManyToOne
    @JoinColumn
    private StyleCategories styleCategory;

}

public class OrderItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "customer_id", nullable = false)
    private Customer customer;

    @ManyToOne
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;

    @Column(nullable = false)
    private long quantity;

    @Column(nullable = false)
    private String status;

    @Column(nullable = false)
    private LocalDateTime orderDate;


    private LocalDate deliveryDate;

    @Column(nullable = false)
    private double totalPrice ;





}




public class RawMateriaes {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String rawCatagoeyName;
    private String rawMetarialName;
    private String description;
    private double unitPrice;
    private String attachment;

    @ManyToOne
    @JoinColumn
    private StyleCategories styleCategories;

    @ManyToOne
    @JoinColumn
    private Customer customer;

}

package com.merchandisemgmt.merchandiseMgmtERP.entity;

import com.merchandisemgmt.merchandiseMgmtERP.entity.inventory.Product;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.Date;

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "Sales")
public class Sale {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "product_id",nullable = false)
    private Product product;


    private long quantity;
    private long Price;
    private double totalPrice;

    @ManyToOne
    @JoinColumn(name = "customer_id",nullable = false)
    private Customer customer;

    private Date saleDate;



}

public class StyleCategories {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String code;
    private String discription;
    private String attachment;
    private String size;
    private String trimName;
    private double metarialQuantity;

    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
@Service
public class CustomerService {
    @Autowired
    private CustomerRepository customerRepository;
    @Autowired
    private OrderItemRepository orderItemRepository;

    @Autowired
    private SaleRepository saleRepository;

    public  List<Customer> getAllCustomer(){
        return customerRepository.findAll();
    }


    public Customer saveCustomer(Customer customer) {
        try{
            customer.setCreatedAt(LocalDateTime.now());
            customer.setUpdatedAt(LocalDateTime.now());
            return customerRepository.save(customer);
        }
        catch(Exception e){
            System.err.println("Error saving customer: " + e.getMessage());
            throw new RuntimeException("Failed to save customer", e);
        }
    }


    public Customer findCustomerById(Long id) {
        return customerRepository.findById(id).orElseThrow(
                () -> new RuntimeException("No customer found with id: " + id)
        );
    }



    public Customer updateCustomer(Customer customer, Long id) {
        try{
            customer.setCreatedAt(LocalDateTime.now());
            customer.setUpdatedAt(LocalDateTime.now());
            return customerRepository.save(customer);
        }
        catch(Exception e){
            System.err.println("Error saving customer: " + e.getMessage());
            throw new RuntimeException("Failed to save customer", e);
        }
    }

    public void deleteCustomerById(Long id) {

        Customer customer = customerRepository.findById(id).orElseThrow(
                () -> new RuntimeException("No customer found with id: " + id)
        );


        long orderCount = orderItemRepository.countByCustomerId(id);
        if (orderCount > 0) {
            throw new RuntimeException("Cannot delete customer with associated orders.");
        }

        long saleCount = saleRepository.countByCustomerId(id);
        if (saleCount > 0) {

            throw new RuntimeException ("Cannot delete customer with associated sale.");
        }


        try {
            customerRepository.delete(customer);
            System.out.println("Customer with id " + id + " successfully deleted.");
        } catch (Exception e) {
            System.err.println("Error deleting customer: " + e.getMessage());
            throw new RuntimeException("Failed to delete customer", e);
        }
    }

}
@Service
public class InventoryItemsService {

    @Autowired
    private InventoryItemRepository inventoryItemRepository;

    @Autowired
    private ProductRepository productRepository;

    public List<InventoryItem> getInventoryItems() {
        return inventoryItemRepository.findAll();
    }


    public InventoryItem findInventoryById(Long id) {
        return inventoryItemRepository.findById(id).orElseThrow(
                () -> new RuntimeException("No InventoryItem found with id: " + id)
        );
    }

    public InventoryItem save(InventoryItem inventoryItem) {
        Optional<Product>product = productRepository.findById(inventoryItem.getProduct().getId());
        if(!product.isPresent()) {
            throw new RuntimeException("No Product found with id: " + inventoryItem.getProduct().getId());
        }
        InventoryItem existingInventory = inventoryItemRepository.findByProductId(inventoryItem.getProduct().getId())
                .orElse(null);

        if (existingInventory != null) {


            existingInventory.setStock(existingInventory.getStock() + inventoryItem.getStock());
            existingInventory.setWarehouse(inventoryItem.getWarehouse());



            inventoryItemRepository.save(existingInventory);
            return existingInventory;
        }

        inventoryItemRepository.save(inventoryItem);
        return inventoryItem;
    }

    public InventoryItem update(InventoryItem inventoryItem,long id) {
        return inventoryItemRepository.save(inventoryItem);
    }

    public void deleteInvetory(long id) {
        inventoryItemRepository.deleteById(id);
    }
    
}
@Service
public class OrderItemService {

    @Autowired
    private OrderItemRepository orderItemRepository;
    @Autowired
    private ProductRepository productRepository;


    public List<OrderItem> getAllOrderItems() {
        return orderItemRepository.findAll();
    }



    public OrderItem saveOrderItem(OrderItem orderItem) {
        try{
            Product product = orderItem.getProduct();
            orderItem.setTotalPrice(orderItem.getQuantity() * orderItem.getProduct().getPrice());
            return orderItemRepository.save(orderItem);
        }
        catch(Exception e){
            System.err.println("Error saving order item: " + e.getMessage());
            throw new RuntimeException("Failed to save order item", e);
        }
    }



    public OrderItem getOrderItemById(Long id) {
        return orderItemRepository.findById(id).orElseThrow(
                () -> new RuntimeException("Order item with id " + id + " not found")
        );
    }


    public OrderItem updateOrderItem(OrderItem orderItem,long id) {
        return orderItemRepository.save(orderItem);
    }



    public void deleteOrderItemById(Long id) {
        orderItemRepository.deleteById(id);
    }
}
@Service
public class ProductService {

    @Autowired
    private  ProductRepository productRepository;
    @Autowired
    private InventoryItemRepository inventoryItemRepository;



    public Product saveProduct(Product p) {
        try {
            return productRepository.save(p);
        } catch (Exception e) {
            System.err.println("Error saving product: " + e.getMessage());
            throw new RuntimeException("Failed to save product", e);
        }
    }

    public List<Product> getAllProduct() {
        return productRepository.findAll();
    }

    public void deleteProductById(Long id) {
        List<InventoryItem> items=inventoryItemRepository.getByProductId(id);
        for(InventoryItem item:items){
            item.setProduct(null);
            inventoryItemRepository.save(item);
        }
        productRepository.deleteById(id);
    }


    public Product findProductById(Long id) {
        return productRepository.findById(id).orElseThrow(
                () -> new RuntimeException("No Faculty found with id: " + id)
        );
    }

    public Product updateProduct(Product p, Long id) {
        return productRepository.save(p);
    }
}

@Service
public class SaleService {

    @Autowired
    private SaleRepository saleRepository;
    @Autowired
    private ProductRepository productRepository;
    @Autowired
    private CustomerRepository customerRepository;

    public Sale saveSale(Sale sale) {
        try {
            double totalPrice = sale.getQuantity() * sale.getProduct().getPrice();
            sale.setTotalPrice(totalPrice);
            return saleRepository.save(sale);
        } catch (Exception e) {
            System.err.println("Error saving Sale: " + e.getMessage());
            throw new RuntimeException("Failed to save Sale", e);
        }
    }

    public List<Sale> getAllSale() {
        return saleRepository.findAll();
    }



    public void deleteSale(Long id) {
        Optional<Sale> sale = saleRepository.findById(id);
        if (sale.isPresent()) {
            saleRepository.deleteById(id);
        } else {
            throw new RuntimeException("Sale not found with id: " + id);
        }
    }



    public Sale findSaleById(Long id) {
        return saleRepository.findById(id).orElseThrow(
                () -> new RuntimeException("No Sale Faculty found with id: " + id)
        );
    }

    public Sale updateSale(Sale s, Long id) {
        return saleRepository.save(s);
    }
}
@Service
public class StockService {
    @Autowired
    private StockRepository stockRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private WareHouseRepository wareHouseRepository;

    @Autowired
    private InventoryItemRepository inventoryItemRepository;


    public List<Stock> getAllStocks() {
       return stockRepository.findAll();

    }
    public Stock getStockById(long id) {
        return stockRepository.findById(id).orElseThrow(
                () -> new RuntimeException("Stock not found with this Id:"+id)
        );
    }

    public Stock addStock(Stock stock) {
        return stockRepository.save(stock);
    }

    public Stock updateStock(Stock stock,long id) {
        return stockRepository.save(stock);
    }
    public void  deleteStockById(long id) {
       stockRepository.deleteById(id);
    }



}
@Service
public class SupplierService {
    @Autowired
    private SupplierRepository supplierRepository;
   @Autowired
    private ProductRepository productRepository;

   public List<Supplier> getAllSuppliers() {
       return supplierRepository.findAll();
   }

   public Supplier SaveSupplier(Supplier supplier) {
       try {
           return supplierRepository.save(supplier);
       } catch (Exception e) {
           System.err.println("Error saving supplier: " + e.getMessage());
           throw new RuntimeException("Failed to save supplier", e);
       }
   }

    public void deleteSupplierById(Long id) {
        supplierRepository.deleteById(id);
    }

    public Supplier findSupplierById(Long id) {
        return supplierRepository.findById(id).orElseThrow(
                () -> new RuntimeException("No supplier found with id: " + id)
        );
    }

    public Supplier updateSupplier(Supplier s, Long id) {
        return supplierRepository.save(s);
    }

}

public class WereHouseService {

    @Autowired
    private WareHouseRepository wareHouseRepository;
    @Autowired
    private InventoryItemRepository inventoryItemRepository;

    public List<Warehouse> getAllWarehouses() {
        return wareHouseRepository.findAll();
    }

    public Warehouse saveWarehouse(Warehouse warehouse) {

        try {
            return wareHouseRepository.save(warehouse);
        } catch (Exception e) {
            System.err.println("Error saving product: " + e.getMessage());
            throw new RuntimeException("Failed to save product", e);
        }
    }

    public Warehouse getWarehouseById(Long id) {
        return wareHouseRepository.findById(id).orElseThrow(
                () -> new RuntimeException("Warehouse with id " + id + " not found")
        );
    }

    public Warehouse updateWarehouse(Warehouse warehouse,long id) {
        return wareHouseRepository.save(warehouse);
    }

    public void deleteWarehouseById(Long id) {

        List<InventoryItem> items = inventoryItemRepository.findByWarehouseId(id);
        for (InventoryItem item : items) {
            item.setWarehouse(null);
            inventoryItemRepository.save(item);
        }

        wareHouseRepository.deleteById(id);
    }




}
